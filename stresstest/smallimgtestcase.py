from imgsizeverifier import *
from globalfunctions import *


def allaspectsmallimgverifier(loop):
    """Verifies if small images are generated by capturing image in different Aspect ratios
        :param: enter the loop count"""

    print("testcase execution started")
    try:
        for i in range(loop):
            # cameratest.openappactivity(("com.android.camera", "com.android.camera.Camera"))  # Open camera app
            opencam()
            time.sleep(5)
            cameratest.clickshutter()  # click shutter button
            time.sleep(3)
            validate("com.android.camera")
            smallimagverifier('aspect', '3:4')  # Verfiy if captured image is smallimage
            cameratest.clickbyxpath("//android.widget.ImageView[@content-desc='More']")  # Select the humbuger menu
            time.sleep(3)
            cameratest.clickbyxpath(
                "//android.widget.TextView[@content-desc='One by one aspect ratio']")  # select 1:1 ratio
            time.sleep(3)
            validate("com.android.camera")
            cameratest.clickshutter()  # click shutter button
            time.sleep(3)
            validate("com.android.camera")
            smallimagverifier('aspect', '1:1')  # Verfiy if captured image is smallimage
            cameratest.clickbyxpath("//android.widget.ImageView[@content-desc='More']")  # Select the humbuger menu
            time.sleep(2)
            cameratest.clickbyxpath(
                "//android.widget.TextView[@content-desc='Nine by sixteen aspect ratio']")  # select 19:6 ratio
            time.sleep(3)
            cameratest.clickshutter()
            time.sleep(3)
            validate("com.android.camera")
            smallimagverifier('aspect', '9:16')  # Verfiy if captured image is smallimage
            cameratest.clickbyxpath("//android.widget.ImageView[@content-desc='More']")  # Select the humbuger menu
            time.sleep(2)
            cameratest.clickbyxpath(
                "//android.widget.TextView[@content-desc='Full screen aspect ratio']")  # select Fullframe ratio
            time.sleep(3)
            cameratest.clickshutter()
            time.sleep(3)
            validate("com.android.camera")
            smallimagverifier('aspect', 'Fullframe')  # Verfiy if captured image is smallimage
            cameratest.clickbyxpath("//android.widget.ImageView[@content-desc='More']")  # Select the humbuger menu
            time.sleep(2)
            cameratest.clickbyxpath(
                "//android.widget.TextView[@content-desc='Three by four aspect ratio']")  # select 3:4 ratio
            time.sleep(3)
            print(f"total cycle done", i + 1)

    except NoSuchElementException:
        if validate("com.android.camera") is False:
            print("camera app had exited")
            excelobj.smallimgaspect(f"camera app crashed", "camera app crashed", "camera app crashed", "camera app "
                                                                                                       "crashed")

        else:
            print("Element error")
            excelobj.smallimgaspect("Element error", "Element error", "Element error", "Element error")


def allmodesmallimageverfier(loop):
    """Capture images in all modes one by one and checks for small image
    :parameter loop count"""

    try:
        cammode = []
        moremode = []
        remvmodes = ['Video', 'Time-lapse', 'Movie effect', 'Long exposure', 'Dual video', 'VLOG', 'Short video',
                     'More', 'Edit', 'Panorama', 'Slow motion', 'Documents']
        opencam()
        time.sleep(5)
        elemval = cameratest.get_element(("ID", "com.android.camera:id/mode_select_item"), True)
        for i in elemval:
            modeval = i.__getattribute__("text")
            cammode.append(modeval)
            cammode.sort()
        # cammode.remove()
        print(cammode)

        cameratest.clickbyxpath("//android.widget.TextView[@text='More']")
        time.sleep(1)
        moreelemt = cameratest.get_element(("ID", "com.android.camera:id/mode_name"), True)

        for l in moreelemt:
            moreval = l.__getattribute__("text")
            moremode.append(moreval)
        # moremode.remove('Edit')
        print(moremode)

        for a in range(loop):
            prevval = ""
            for j in cammode:
                print(j)
                testt = f"//android.widget.TextView[@text='{j}']"
                print(testt)
                if prevval == "Pro":
                    move = 'right'
                else:
                    move = 'left'
                if j in remvmodes:
                    print(f"skipping as mode {j} not required to test")
                else:
                    elemvisi = cameratest.is_visible(("XPATH", f"//android.widget.TextView[@text='{j}']"))
                    if elemvisi is False:
                        print("element not visible, swiping to element")
                        print(move)
                        cameratest.swipe_to_element(("ID", "com.android.camera:id/mode_select_scrollview"),
                                                    ("XPATH", f"//android.widget.TextView[@text='{j}']"), move)
                        cameratest.clickbyxpath(f"//android.widget.TextView[@text='{j}']")
                        time.sleep(1)
                        cameratest.clickshutter()
                        time.sleep(3)
                        smallimagverifier("smallmodes", f"{j}")
                    else:
                        print("element visible")
                        cameratest.clickbyxpath(f"//android.widget.TextView[@text='{j}']")
                        time.sleep(1)
                        cameratest.clickshutter()
                        time.sleep(3)
                        smallimagverifier("smallmodes", f"{j}")
                    prevval = j

            for k in moremode:
                print("access modes in More")
                if cameratest.is_visible(("XPATH", "//android.widget.TextView[@text='Pro']")):
                    move = 'right'
                else:
                    move = 'left'
                if k in remvmodes:
                    print("skipping as video mode")
                else:
                    elemvisi = cameratest.is_visible(("XPATH", "//android.widget.TextView[@text='More']"))
                    if elemvisi is False:
                        print("element not visible, swiping to element")
                        cameratest.swipe_to_element(("ID", "com.android.camera:id/mode_select_scrollview"),
                                                    ("XPATH", "//android.widget.TextView[@text='More']"), move)
                        validatforclose("com.android.camera", k)
                        cameratest.clickbyxpath("//android.widget.TextView[@text='More']")
                        time.sleep(2)
                        cameratest.clickbyxpath(f"//android.widget.TextView[@text='{k}']")
                        time.sleep(2)
                        cameratest.clickshutter()
                        time.sleep(3)
                        smallimagverifier("smallmodes", f"{k}")
                    else:
                        cameratest.clickbyxpath("//android.widget.TextView[@text='More']")
                        time.sleep(2)
                        cameratest.clickbyxpath(f"//android.widget.TextView[@text='{k}']")
                        time.sleep(2)
                        cameratest.clickshutter()
                        time.sleep(3)
                        smallimagverifier("smallmodes", f"{k}")
                        cameratest.clickbyid("com.android.camera:id/bottom_external_mode_close")
                        time.sleep(3)
                print("completed cycle:", a + 1)
    except NoSuchElementException:
        if validate("com.android.camera") is False:
            print("app is closed")
            excelobj.smallimgallmode("camera has crashed", "camera has crashed", "camera has crashed", "camera has "
                                                                                                       "crashed")
        else:
            print("app is active element is not found")
            excelobj.smallimgallmode("element error", "element error", "element error", "element error")
